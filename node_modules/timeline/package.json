{
  "name": "timeline",
  "exports": "timeline",
  "version": "0.3.0",
  "description": "Time based visualization layout manager",
  "main": "timeline.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": {
    "name": "Victor Saiz"
  },
  "license": "BSD-3",
  "dependencies": {
    "d3": "^3.4.13",
    "events": "~1.0.0",
    "shortid": "~2.0.0",
    "utils": "git://github.com/ircam-rnd/utils"
  },
  "readme": "# timeline\n\nThis module is a layer/layout manager for time based visualisations written on top of [d3.js](http://d3js.org/).\nThe module by itself doesn't accomplish much as long as you don't pass it in some visualisation layer or component.\nThis illustrates how you could use with a [segment visualiser](https://github.com/ircam-rnd/segment-vis).\n\n## Status\n\nThis library is under heavy development and subject to change.\nEvert new API breaking change we will be adding snapshots to the repository so you can always fetch a working copy.\n\nFor an in depth  explanation on the philosophy and usage of this library please refer to [this blog post](http://wave.ircam.fr/publications/visual-tools/).\n\n## Usage\n\n### Public API\n\n##### `constructor(options)`\n\n> @param `options` {object}\n> `options.name` a unique name to identify the timeline\n\n##### `width(value)`\n\n>  @param `value` {int}  \n>  set the width of the timeline (in pixels)\n\n##### `height(value)`\n\n>  @param `value` {int}  \n>  set the height of the timeline (in pixels)\n\n##### `xDomain(dataDomain)`\n\n>  @param `dataDomain` {array} [minValue, maxValue]  \n>  set the data domain of the timeline (internally defines a d3 scale domain).\n\n```javascript\n// example\ntimeline.xDomain([0, buffer.duration]);\n```\n\n##### `layer(layerInstance)` _alias_ `add(layerInstance)`\n\n>  @param `layerInstance` {object}  \n>  add a visualization layer to the timeline the layer should inherit from LayerVis\n\n##### `remove(layerInstance)`\n\n>  @param `layerInstance` {object}  \n>  remove a layer from the timeline\n\n##### `draw(sel)`\n\n>  @param `sel` {object} _some d3 selection given from d3.call_  \n>  construct all layers registered in the timeline and initialize event delegation\n\n```javascript\n// example\nd3.select('#timeline').call(timeline.draw)\n```\n\n##### `update(...layers)`\n\n>  @params `...layers` {list} _optionnal_  \n>  any number of layer to update, references to the layers to update,  \n>  if no arguments given, update all registered layers\n\n\n### Example use\n\n```javascript\n// import the package - assume a commonjs environment (aka browserify)\nvar timeline = require('timeline');\nvar buffer = someAudioBuffer;\n\n// create the timeline\nvar graph = timeline()\n  .width(1000)\n  .height(150)\n  .xDomain([0, buffer.duration])\n\n// add some layers\ngraph.layer(segmentVis);\ngraph.layer(waveformVis);\n\n// draw the timeline\nd3.select('#timeline').call(graph.draw);\n\n// ... later to render some data changes\ngraph.update();\n```\n\n<div class=\"only-readme\">\n<h2>License</h2>\n<p>This module is released under the <a href=\"http://opensource.org/licenses/BSD-3-Clause\">BSD-3-Clause license</a>.</p>\n\n<h2>Acknowledgments</h2>\n<p>This code is part of the <a href=\"http://wave.ircam.fr\">WAVE project</a>, funded by ANR (The French National Research Agency), <em>ContInt</em> program, 2012-2015.</p>\n</div>",
  "readmeFilename": "README.md",
  "gitHead": "ea772fa8379bad08d57d4feafda49e4602880204",
  "_id": "timeline@0.3.0",
  "_shasum": "ef32ace1cbc83ddc17f2971bf5b26073decf2e2e",
  "_from": "../../../../var/folders/jd/84c91jj5229fc6qpsc2f0d140000gn/T/npm-24811-e75d709c/1422546226756-0.9227189521770924/ea772fa8379bad08d57d4feafda49e4602880204",
  "_resolved": "git://github.com/ircam-rnd/timeline#ea772fa8379bad08d57d4feafda49e4602880204"
}
