{
  "name": "waveform",
  "version": "0.2.0",
  "description": "Waveform drawing utility",
  "main": "waveform.js",
  "author": {
    "name": "Victor Saiz",
    "email": "vectorsize@gmail.com"
  },
  "contributors": [
    {
      "name": "Benjamin Matuszewski"
    }
  ],
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Ircam-RnD/waveform"
  },
  "dependencies": {
    "layer": "git://github.com/ircam-rnd/layer",
    "utils": "git://github.com/ircam-rnd/utils"
  },
  "license": "BSD-3",
  "readme": "# Waveform visualiser\n\nUse this module to visualise waveform data over a shared timeline.  \nThe module relies on the [timeline](https://github.com/Ircam-RnD/timeLine) object.\n\n<!-- _A working demo for this module can be found [here](#)_ -->\n\n## Example usage\n\n```javascript\nvar d3 = require('d3');\nvar timeline = require('timeline');\nvar waveform = require('waveform');\nvar buffer = someAudioBuffer;\n\n// create the graph\nvar graph = timeline()\n  .xDomain([0, buffer.duration])\n  .width(1000)\n  .height(150)\n  \n// create the waveform layer\nvar waveformLayer = waveform()\n  .params({ name: 'my-waveform', renderingStrategy: 'svg' })\n  // pass the raw ArrayBuffer from our audio buffer\n  .data(buffer.getChannelData(0).buffer)\n  .sampleRate(buffer.sampleRate)\n  .duration(buffer.duration)\n  .color('steelblue');\n\n// add the waveform layer to the timeline\ngraph.layer(waveformLayer);\n\n// draw the timeline\nd3.select('#timeline').call(graph.draw);\n```\n\n\n## Public API\n\n### #params( _[params]_ )\n\n<!-- ```javascript\n// Usage\n.params({\n  yDomain: [0, 100],\n  renderingStrategy: 'svg',\n  // ...\n})\n``` -->\n\n> @param _`params`_, @value `Object`\n\nIf _`params`_ is present sets the layer's parameters via the passed in _`params`_`Object`, otherwise returns the layer's internal parameters.  \n\n\n> * @key `yDomain`, @value `[int, int]`  \n> Sets the layer's scale's domain to the specified array of numbers. The array must contain two or more numbers.\n\n> * @key `renderingStrategy`, @value `'svg|canvas'`, @defaults `'svg'`  \n> Sets the layer's rendering strategy.\n\n> * @key `triggerUpdateZoomDelta`, @value `float`, @defaults `0.02`  \n> Sets the minimum zoom delta level that will trigger an update call.\n\n> * @key `triggerUpdateDragDelta`, @value `float`, @defaults `0.02`  \n> Sets the minimum dragged delta (in pixels) dragged that will trigger an update call.\n\n\n### #data( _[data]_ )\n\n> @param _`data`_, @value `Array|ArrayBuffer`, @optional  \n\nIf _`data`_ is present sets the data to be rendered via the passed in _`data`_`Array{Buffer}`, otherwise returns the _`data`_`Array{Buffer}`.\n\n### #duration( _[duration]_ )\n\n> @param _`duration`_, @value `Number`, @optional  \n\nIf _`duration`_ is present sets the duration of the data to be rendered via the passed in _`duration`_`Number`, otherwise returns the _`duration`_`Number`. Must be specified in the same unit as the `timeline`'s xDomain.\n\n\n### #sampleRate( _[sampleRate]_ )\n\n> @param _`sampleRate`_, @value `Number`, @optional    \n\nIf _`sampleRate`_ is present sets the sampleRate of the _`data`_ array via the passed in _`sampleRate`_`Number`, otherwise returns the _`sampleRate`_`Number`.\n\n### #color( _[color]_ )\n\n> @param _`color`_, @value `String`, @optional  \n\nIf _`color`_ is present sets the color to be use for the rendering via the passed in _`color`_`(hex)String`, otherwise returns the _`color`_`(hex)String`.\n\n## Status\nThis library is under heavy development and subject to change.  \nEvert new API breaking change we will be adding snapshots to the repository so you can always fetch a working copy.\n\nFor an in depth  explanation on the philosophy and usage of this library please refer to [this blog post](http://wave.ircam.fr/publications/visual-tools/).\n\n## License\nThis module is released under the [BSD-3-Clause license](http://opensource.org/licenses/BSD-3-Clause).\n\n## Acknowledgments\nThis code is part of the [WAVE project](http://wave.ircam.fr),  \nfunded by ANR (The French National Research Agency),  \n_ContInt_ program,  \n2012-2015.",
  "readmeFilename": "README.md",
  "gitHead": "69ba36aaf02a0e9d8c963bbee421cb67ac61f9fd",
  "bugs": {
    "url": "https://github.com/Ircam-RnD/waveform/issues"
  },
  "homepage": "https://github.com/Ircam-RnD/waveform",
  "_id": "waveform@0.2.0",
  "_shasum": "8a501945593d959f58168c833bd1d14eaeafc033",
  "_from": "../../../../var/folders/jd/84c91jj5229fc6qpsc2f0d140000gn/T/npm-24811-e75d709c/1422546226728-0.6307250768877566/69ba36aaf02a0e9d8c963bbee421cb67ac61f9fd",
  "_resolved": "git://github.com/ircam-rnd/waveform#69ba36aaf02a0e9d8c963bbee421cb67ac61f9fd"
}
