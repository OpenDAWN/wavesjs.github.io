{
  "name": "segment",
  "version": "0.3.1",
  "description": "Segment component",
  "main": "segment.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": {
    "name": "Victor Saiz"
  },
  "contributors": [
    {
      "name": "Benjamin Matuszewski"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/Ircam-RnD/segment"
  },
  "license": "BSD-3",
  "dependencies": {
    "layer": "git://github.com/ircam-rnd/layer",
    "utils": "git://github.com/ircam-rnd/utils"
  },
  "devDependencies": {},
  "readme": "# WAVE.JS - Segment Component\n\n_Use this module to visualise and edit data segments over a shared timeline._\n\nThis component is part of the `waves.js` library ([https://github.com/Ircam-RnD/waves](https://github.com/Ircam-RnD/waves)) and relies on a [timeline](https://github.com/ircam-rnd/timeline) instance\n\nDocumentation for this component can be found at [http://ircam-rnd.github.io/waves/#ui-segment](http://ircam-rnd.github.io/waves/#ui-segment)\n\n## License\n\nThis module is released under the [BSD-3-Clause license](http://opensource.org/licenses/BSD-3-Clause).\n\n## Acknowledgments\n\nThis code is part of the [WAVE project](http://wave.ircam.fr), funded by ANR (The French National Research Agency),  \n_ContInt_ program, 2012-2015.\n<!--\n\n## Segment editor\n\n> Plun-g-play editing tunctionality companion to the segment visualizer \n\nUse this module to visualise data segments over a shared timeline.  \nThe module relies on a [timeline](https://github.com/Ircam-RnD/timeLine) instance.\n\n### Status\n\nThis library is under heavy development and subject to change.  \nEvert new API breaking change we will be adding snapshots to the repository so you can always fetch a working copy.\n\nFor an in depth  explanation on the philosophy and usage of this library please refer to [this blog post](http://wave.ircam.fr/publications/visual-tools/).\n###Demo\n\nA woring demo for this module can be found [here](https://github.com/Ircam-RnD/segment-edit)\n### Usage\n\n#### Data\nWill be passed to a timeLine later. In this case a Backbone collection.\n\n```js\nvar collection = new Backbone.Collection([{\n    \"begin\": \"0\",\n    \"duration\": \"16121\",\n    \"end\": \"16121\",\n    \"color\": \"#A9d\"\n  }, { \"begin\": \"1\" …},\n  }, { \"begin\": \"3\" …},\n]);\n```\n\n### DataView\nIf your data doesn't match the expected structure you can pass in a dataView that lets the visualizer how to access and manipulate the data.\n\n```js\n// Sample dataView tells us how to access the data\nvar view = {\n  // tell d3 which is our key for sorting\n  sortIndex: function(d) {\n    return d.get('begin');\n  },\n   // how to retrieve or set the value used as the start of the segment\n  start: function(d, v) {\n    // no value, we retrieve\n    if(!v) return +d.get('begin');\n    // yesvalue we set :)\n    d.set('begin', v);\n  },\n  // how to retrieve or set the value used as the duration of the segment\n  duration: function(d, v) {\n    if(!v) return +d.get('duration');\n    d.set('duration', v);\n  },\n  // how to retrieve or set the value used for the color of the segment\n  color: function(d, v) {\n    if(!v) return d.get('color');\n    d.set('color', v);\n  }\n};\n```\n\n#### Creating the Visualiser layer\n```js\nvar seg = segmentVis()\n  .data(collection.models)\n  .dataView(view)\n  .name('segments')  \n  .opacity(0.5);\n```\n\n#### Creating the timeLine layout\n```js\nvar graph = timeLine()\n  .width(800)\n  .height(150)\n  .xDomain([0, 100]);\n```\n\n#### Adding the Visualiser layer and drawing everything\n\n```js\n// we add layers like this\ngraph.layer(seg);\n// we pass in the drawing method from our timeline object\nd3.select('.timeline').call(graph.draw);\n```\n\n\n<h3 id=\"deleting\">Deleting segments</h3>\n```js\n// find selected segments and delete each of them from the collection\nvar selected = d3.selectAll('.layout .selected');\nselected.each(function(segment){\n  collection.remove(segment);\n});\n// pass again the modified data and call update\nseg.data(collection.models);\ngraph.update();\n```\n\n#### Adding segments\n\n```js\n// add one segment to the collection\ncollection.add({\n  \"begin\": 40,\n  \"duration\": 10,\n  \"color\": \"#174345\"\n});\n// pass again the modified data and call update\nseg.data(collection.models);\ngraph.update();\n```\n## License\nThis module is released under the [BSD-3-Clause license](http://opensource.org/licenses/BSD-3-Clause).\n## Acknowledgments\nThis code is part of the [WAVE project](http://wave.ircam.fr),  \nfunded by ANR (The French National Research Agency),  \n_ContInt_ program,  \n2012-2015.\n\n-->",
  "readmeFilename": "README.md",
  "gitHead": "e16a5a55b2fe10d8159014b3a4c3b99c0424171a",
  "bugs": {
    "url": "https://github.com/Ircam-RnD/segment/issues"
  },
  "homepage": "https://github.com/Ircam-RnD/segment",
  "_id": "segment@0.3.1",
  "_shasum": "e8dc3254ae2c6f48225a8c46eff5e73c9cddb6d4",
  "_from": "../../../../var/folders/jd/84c91jj5229fc6qpsc2f0d140000gn/T/npm-24811-e75d709c/1422546226752-0.5346050069201738/e16a5a55b2fe10d8159014b3a4c3b99c0424171a",
  "_resolved": "git://github.com/ircam-rnd/segment#e16a5a55b2fe10d8159014b3a4c3b99c0424171a"
}
